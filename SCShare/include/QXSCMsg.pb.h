// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QXSCMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_QXSCMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_QXSCMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_QXSCMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_QXSCMsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_QXSCMsg_2eproto;
namespace QXSCMsg {
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
class ClientRegister;
struct ClientRegisterDefaultTypeInternal;
extern ClientRegisterDefaultTypeInternal _ClientRegister_default_instance_;
class ClientRegisterReply;
struct ClientRegisterReplyDefaultTypeInternal;
extern ClientRegisterReplyDefaultTypeInternal _ClientRegisterReply_default_instance_;
class MsgBase;
struct MsgBaseDefaultTypeInternal;
extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MsgPayload;
struct MsgPayloadDefaultTypeInternal;
extern MsgPayloadDefaultTypeInternal _MsgPayload_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
}  // namespace QXSCMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::QXSCMsg::ClientInfo* Arena::CreateMaybeMessage<::QXSCMsg::ClientInfo>(Arena*);
template<> ::QXSCMsg::ClientRegister* Arena::CreateMaybeMessage<::QXSCMsg::ClientRegister>(Arena*);
template<> ::QXSCMsg::ClientRegisterReply* Arena::CreateMaybeMessage<::QXSCMsg::ClientRegisterReply>(Arena*);
template<> ::QXSCMsg::MsgBase* Arena::CreateMaybeMessage<::QXSCMsg::MsgBase>(Arena*);
template<> ::QXSCMsg::MsgPayload* Arena::CreateMaybeMessage<::QXSCMsg::MsgPayload>(Arena*);
template<> ::QXSCMsg::ServerInfo* Arena::CreateMaybeMessage<::QXSCMsg::ServerInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace QXSCMsg {

enum MsgType : int {
  QX_MSG_TYPE_UKNOWN = 0,
  QX_MSG_TYPE_REGISTER = 1,
  QX_MSG_TYPE_REGISTER_REPLY = 2,
  MsgType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MsgType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MsgType_IsValid(int value);
constexpr MsgType MsgType_MIN = QX_MSG_TYPE_UKNOWN;
constexpr MsgType MsgType_MAX = QX_MSG_TYPE_REGISTER_REPLY;
constexpr int MsgType_ARRAYSIZE = MsgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor();
template<typename T>
inline const std::string& MsgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MsgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MsgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MsgType_descriptor(), enum_t_value);
}
inline bool MsgType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MsgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MsgType>(
    MsgType_descriptor(), name, value);
}
// ===================================================================

class MsgPayload final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QXSCMsg.MsgPayload) */ {
 public:
  inline MsgPayload() : MsgPayload(nullptr) {}
  ~MsgPayload() override;
  explicit PROTOBUF_CONSTEXPR MsgPayload(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgPayload(const MsgPayload& from);
  MsgPayload(MsgPayload&& from) noexcept
    : MsgPayload() {
    *this = ::std::move(from);
  }

  inline MsgPayload& operator=(const MsgPayload& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgPayload& operator=(MsgPayload&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgPayload& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgPayload* internal_default_instance() {
    return reinterpret_cast<const MsgPayload*>(
               &_MsgPayload_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MsgPayload& a, MsgPayload& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgPayload* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgPayload* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgPayload* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgPayload>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgPayload& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgPayload& from) {
    MsgPayload::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgPayload* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QXSCMsg.MsgPayload";
  }
  protected:
  explicit MsgPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBussinessKeyFieldNumber = 4,
    kClientInfoFieldNumber = 5,
    kServerIdFieldNumber = 6,
    kMsgBaseFieldNumber = 7,
    kTransIdFieldNumber = 1,
    kMsgTypeFieldNumber = 2,
    kErrCodeFieldNumber = 3,
  };
  // string bussinessKey = 4;
  void clear_bussinesskey();
  const std::string& bussinesskey() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bussinesskey(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bussinesskey();
  PROTOBUF_NODISCARD std::string* release_bussinesskey();
  void set_allocated_bussinesskey(std::string* bussinesskey);
  private:
  const std::string& _internal_bussinesskey() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bussinesskey(const std::string& value);
  std::string* _internal_mutable_bussinesskey();
  public:

  // .QXSCMsg.ClientInfo clientInfo = 5;
  bool has_clientinfo() const;
  private:
  bool _internal_has_clientinfo() const;
  public:
  void clear_clientinfo();
  const ::QXSCMsg::ClientInfo& clientinfo() const;
  PROTOBUF_NODISCARD ::QXSCMsg::ClientInfo* release_clientinfo();
  ::QXSCMsg::ClientInfo* mutable_clientinfo();
  void set_allocated_clientinfo(::QXSCMsg::ClientInfo* clientinfo);
  private:
  const ::QXSCMsg::ClientInfo& _internal_clientinfo() const;
  ::QXSCMsg::ClientInfo* _internal_mutable_clientinfo();
  public:
  void unsafe_arena_set_allocated_clientinfo(
      ::QXSCMsg::ClientInfo* clientinfo);
  ::QXSCMsg::ClientInfo* unsafe_arena_release_clientinfo();

  // .QXSCMsg.ServerInfo ServerId = 6;
  bool has_serverid() const;
  private:
  bool _internal_has_serverid() const;
  public:
  void clear_serverid();
  const ::QXSCMsg::ServerInfo& serverid() const;
  PROTOBUF_NODISCARD ::QXSCMsg::ServerInfo* release_serverid();
  ::QXSCMsg::ServerInfo* mutable_serverid();
  void set_allocated_serverid(::QXSCMsg::ServerInfo* serverid);
  private:
  const ::QXSCMsg::ServerInfo& _internal_serverid() const;
  ::QXSCMsg::ServerInfo* _internal_mutable_serverid();
  public:
  void unsafe_arena_set_allocated_serverid(
      ::QXSCMsg::ServerInfo* serverid);
  ::QXSCMsg::ServerInfo* unsafe_arena_release_serverid();

  // .QXSCMsg.MsgBase msgBase = 7;
  bool has_msgbase() const;
  private:
  bool _internal_has_msgbase() const;
  public:
  void clear_msgbase();
  const ::QXSCMsg::MsgBase& msgbase() const;
  PROTOBUF_NODISCARD ::QXSCMsg::MsgBase* release_msgbase();
  ::QXSCMsg::MsgBase* mutable_msgbase();
  void set_allocated_msgbase(::QXSCMsg::MsgBase* msgbase);
  private:
  const ::QXSCMsg::MsgBase& _internal_msgbase() const;
  ::QXSCMsg::MsgBase* _internal_mutable_msgbase();
  public:
  void unsafe_arena_set_allocated_msgbase(
      ::QXSCMsg::MsgBase* msgbase);
  ::QXSCMsg::MsgBase* unsafe_arena_release_msgbase();

  // uint32 transId = 1;
  void clear_transid();
  uint32_t transid() const;
  void set_transid(uint32_t value);
  private:
  uint32_t _internal_transid() const;
  void _internal_set_transid(uint32_t value);
  public:

  // uint32 msgType = 2;
  void clear_msgtype();
  uint32_t msgtype() const;
  void set_msgtype(uint32_t value);
  private:
  uint32_t _internal_msgtype() const;
  void _internal_set_msgtype(uint32_t value);
  public:

  // int32 errCode = 3;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QXSCMsg.MsgPayload)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bussinesskey_;
    ::QXSCMsg::ClientInfo* clientinfo_;
    ::QXSCMsg::ServerInfo* serverid_;
    ::QXSCMsg::MsgBase* msgbase_;
    uint32_t transid_;
    uint32_t msgtype_;
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QXSCMsg_2eproto;
};
// -------------------------------------------------------------------

class ClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QXSCMsg.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  ~ClientInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientInfo(const ClientInfo& from);
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientInfo& from) {
    ClientInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QXSCMsg.ClientInfo";
  }
  protected:
  explicit ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint32 clientId = 1;
  void clear_clientid();
  uint32_t clientid() const;
  void set_clientid(uint32_t value);
  private:
  uint32_t _internal_clientid() const;
  void _internal_set_clientid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QXSCMsg.ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t clientid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QXSCMsg_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QXSCMsg.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit PROTOBUF_CONSTEXPR ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerInfo& from) {
    ServerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QXSCMsg.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
  };
  // string serverName = 2;
  void clear_servername();
  const std::string& servername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servername();
  PROTOBUF_NODISCARD std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // uint32 serverId = 1;
  void clear_serverid();
  uint32_t serverid() const;
  void set_serverid(uint32_t value);
  private:
  uint32_t _internal_serverid() const;
  void _internal_set_serverid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QXSCMsg.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
    uint32_t serverid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QXSCMsg_2eproto;
};
// -------------------------------------------------------------------

class MsgBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QXSCMsg.MsgBase) */ {
 public:
  inline MsgBase() : MsgBase(nullptr) {}
  ~MsgBase() override;
  explicit PROTOBUF_CONSTEXPR MsgBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBase(const MsgBase& from);
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MsgBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MsgBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MsgBase& from) {
    MsgBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QXSCMsg.MsgBase";
  }
  protected:
  explicit MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientRegisterFieldNumber = 1,
    kClientRegisterReplyFieldNumber = 2,
  };
  // .QXSCMsg.ClientRegister clientRegister = 1;
  bool has_clientregister() const;
  private:
  bool _internal_has_clientregister() const;
  public:
  void clear_clientregister();
  const ::QXSCMsg::ClientRegister& clientregister() const;
  PROTOBUF_NODISCARD ::QXSCMsg::ClientRegister* release_clientregister();
  ::QXSCMsg::ClientRegister* mutable_clientregister();
  void set_allocated_clientregister(::QXSCMsg::ClientRegister* clientregister);
  private:
  const ::QXSCMsg::ClientRegister& _internal_clientregister() const;
  ::QXSCMsg::ClientRegister* _internal_mutable_clientregister();
  public:
  void unsafe_arena_set_allocated_clientregister(
      ::QXSCMsg::ClientRegister* clientregister);
  ::QXSCMsg::ClientRegister* unsafe_arena_release_clientregister();

  // .QXSCMsg.ClientRegisterReply clientRegisterReply = 2;
  bool has_clientregisterreply() const;
  private:
  bool _internal_has_clientregisterreply() const;
  public:
  void clear_clientregisterreply();
  const ::QXSCMsg::ClientRegisterReply& clientregisterreply() const;
  PROTOBUF_NODISCARD ::QXSCMsg::ClientRegisterReply* release_clientregisterreply();
  ::QXSCMsg::ClientRegisterReply* mutable_clientregisterreply();
  void set_allocated_clientregisterreply(::QXSCMsg::ClientRegisterReply* clientregisterreply);
  private:
  const ::QXSCMsg::ClientRegisterReply& _internal_clientregisterreply() const;
  ::QXSCMsg::ClientRegisterReply* _internal_mutable_clientregisterreply();
  public:
  void unsafe_arena_set_allocated_clientregisterreply(
      ::QXSCMsg::ClientRegisterReply* clientregisterreply);
  ::QXSCMsg::ClientRegisterReply* unsafe_arena_release_clientregisterreply();

  // @@protoc_insertion_point(class_scope:QXSCMsg.MsgBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::QXSCMsg::ClientRegister* clientregister_;
    ::QXSCMsg::ClientRegisterReply* clientregisterreply_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QXSCMsg_2eproto;
};
// -------------------------------------------------------------------

class ClientRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QXSCMsg.ClientRegister) */ {
 public:
  inline ClientRegister() : ClientRegister(nullptr) {}
  ~ClientRegister() override;
  explicit PROTOBUF_CONSTEXPR ClientRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientRegister(const ClientRegister& from);
  ClientRegister(ClientRegister&& from) noexcept
    : ClientRegister() {
    *this = ::std::move(from);
  }

  inline ClientRegister& operator=(const ClientRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRegister& operator=(ClientRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRegister* internal_default_instance() {
    return reinterpret_cast<const ClientRegister*>(
               &_ClientRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClientRegister& a, ClientRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRegister* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRegister>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientRegister& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientRegister& from) {
    ClientRegister::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRegister* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QXSCMsg.ClientRegister";
  }
  protected:
  explicit ClientRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // uint32 clientId = 1;
  void clear_clientid();
  uint32_t clientid() const;
  void set_clientid(uint32_t value);
  private:
  uint32_t _internal_clientid() const;
  void _internal_set_clientid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QXSCMsg.ClientRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t clientid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QXSCMsg_2eproto;
};
// -------------------------------------------------------------------

class ClientRegisterReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:QXSCMsg.ClientRegisterReply) */ {
 public:
  inline ClientRegisterReply() : ClientRegisterReply(nullptr) {}
  ~ClientRegisterReply() override;
  explicit PROTOBUF_CONSTEXPR ClientRegisterReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientRegisterReply(const ClientRegisterReply& from);
  ClientRegisterReply(ClientRegisterReply&& from) noexcept
    : ClientRegisterReply() {
    *this = ::std::move(from);
  }

  inline ClientRegisterReply& operator=(const ClientRegisterReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientRegisterReply& operator=(ClientRegisterReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientRegisterReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientRegisterReply* internal_default_instance() {
    return reinterpret_cast<const ClientRegisterReply*>(
               &_ClientRegisterReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClientRegisterReply& a, ClientRegisterReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientRegisterReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientRegisterReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientRegisterReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientRegisterReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientRegisterReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientRegisterReply& from) {
    ClientRegisterReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRegisterReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "QXSCMsg.ClientRegisterReply";
  }
  protected:
  explicit ClientRegisterReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrCodeFieldNumber = 1,
  };
  // int32 errCode = 1;
  void clear_errcode();
  int32_t errcode() const;
  void set_errcode(int32_t value);
  private:
  int32_t _internal_errcode() const;
  void _internal_set_errcode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:QXSCMsg.ClientRegisterReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t errcode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_QXSCMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgPayload

// uint32 transId = 1;
inline void MsgPayload::clear_transid() {
  _impl_.transid_ = 0u;
}
inline uint32_t MsgPayload::_internal_transid() const {
  return _impl_.transid_;
}
inline uint32_t MsgPayload::transid() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.transId)
  return _internal_transid();
}
inline void MsgPayload::_internal_set_transid(uint32_t value) {
  
  _impl_.transid_ = value;
}
inline void MsgPayload::set_transid(uint32_t value) {
  _internal_set_transid(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.MsgPayload.transId)
}

// uint32 msgType = 2;
inline void MsgPayload::clear_msgtype() {
  _impl_.msgtype_ = 0u;
}
inline uint32_t MsgPayload::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline uint32_t MsgPayload::msgtype() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.msgType)
  return _internal_msgtype();
}
inline void MsgPayload::_internal_set_msgtype(uint32_t value) {
  
  _impl_.msgtype_ = value;
}
inline void MsgPayload::set_msgtype(uint32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.MsgPayload.msgType)
}

// int32 errCode = 3;
inline void MsgPayload::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t MsgPayload::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t MsgPayload::errcode() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.errCode)
  return _internal_errcode();
}
inline void MsgPayload::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void MsgPayload::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.MsgPayload.errCode)
}

// string bussinessKey = 4;
inline void MsgPayload::clear_bussinesskey() {
  _impl_.bussinesskey_.ClearToEmpty();
}
inline const std::string& MsgPayload::bussinesskey() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.bussinessKey)
  return _internal_bussinesskey();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgPayload::set_bussinesskey(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bussinesskey_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QXSCMsg.MsgPayload.bussinessKey)
}
inline std::string* MsgPayload::mutable_bussinesskey() {
  std::string* _s = _internal_mutable_bussinesskey();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.MsgPayload.bussinessKey)
  return _s;
}
inline const std::string& MsgPayload::_internal_bussinesskey() const {
  return _impl_.bussinesskey_.Get();
}
inline void MsgPayload::_internal_set_bussinesskey(const std::string& value) {
  
  _impl_.bussinesskey_.Set(value, GetArenaForAllocation());
}
inline std::string* MsgPayload::_internal_mutable_bussinesskey() {
  
  return _impl_.bussinesskey_.Mutable(GetArenaForAllocation());
}
inline std::string* MsgPayload::release_bussinesskey() {
  // @@protoc_insertion_point(field_release:QXSCMsg.MsgPayload.bussinessKey)
  return _impl_.bussinesskey_.Release();
}
inline void MsgPayload::set_allocated_bussinesskey(std::string* bussinesskey) {
  if (bussinesskey != nullptr) {
    
  } else {
    
  }
  _impl_.bussinesskey_.SetAllocated(bussinesskey, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bussinesskey_.IsDefault()) {
    _impl_.bussinesskey_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.MsgPayload.bussinessKey)
}

// .QXSCMsg.ClientInfo clientInfo = 5;
inline bool MsgPayload::_internal_has_clientinfo() const {
  return this != internal_default_instance() && _impl_.clientinfo_ != nullptr;
}
inline bool MsgPayload::has_clientinfo() const {
  return _internal_has_clientinfo();
}
inline void MsgPayload::clear_clientinfo() {
  if (GetArenaForAllocation() == nullptr && _impl_.clientinfo_ != nullptr) {
    delete _impl_.clientinfo_;
  }
  _impl_.clientinfo_ = nullptr;
}
inline const ::QXSCMsg::ClientInfo& MsgPayload::_internal_clientinfo() const {
  const ::QXSCMsg::ClientInfo* p = _impl_.clientinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::QXSCMsg::ClientInfo&>(
      ::QXSCMsg::_ClientInfo_default_instance_);
}
inline const ::QXSCMsg::ClientInfo& MsgPayload::clientinfo() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.clientInfo)
  return _internal_clientinfo();
}
inline void MsgPayload::unsafe_arena_set_allocated_clientinfo(
    ::QXSCMsg::ClientInfo* clientinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientinfo_);
  }
  _impl_.clientinfo_ = clientinfo;
  if (clientinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QXSCMsg.MsgPayload.clientInfo)
}
inline ::QXSCMsg::ClientInfo* MsgPayload::release_clientinfo() {
  
  ::QXSCMsg::ClientInfo* temp = _impl_.clientinfo_;
  _impl_.clientinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QXSCMsg::ClientInfo* MsgPayload::unsafe_arena_release_clientinfo() {
  // @@protoc_insertion_point(field_release:QXSCMsg.MsgPayload.clientInfo)
  
  ::QXSCMsg::ClientInfo* temp = _impl_.clientinfo_;
  _impl_.clientinfo_ = nullptr;
  return temp;
}
inline ::QXSCMsg::ClientInfo* MsgPayload::_internal_mutable_clientinfo() {
  
  if (_impl_.clientinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::QXSCMsg::ClientInfo>(GetArenaForAllocation());
    _impl_.clientinfo_ = p;
  }
  return _impl_.clientinfo_;
}
inline ::QXSCMsg::ClientInfo* MsgPayload::mutable_clientinfo() {
  ::QXSCMsg::ClientInfo* _msg = _internal_mutable_clientinfo();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.MsgPayload.clientInfo)
  return _msg;
}
inline void MsgPayload::set_allocated_clientinfo(::QXSCMsg::ClientInfo* clientinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.clientinfo_;
  }
  if (clientinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clientinfo);
    if (message_arena != submessage_arena) {
      clientinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clientinfo_ = clientinfo;
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.MsgPayload.clientInfo)
}

// .QXSCMsg.ServerInfo ServerId = 6;
inline bool MsgPayload::_internal_has_serverid() const {
  return this != internal_default_instance() && _impl_.serverid_ != nullptr;
}
inline bool MsgPayload::has_serverid() const {
  return _internal_has_serverid();
}
inline void MsgPayload::clear_serverid() {
  if (GetArenaForAllocation() == nullptr && _impl_.serverid_ != nullptr) {
    delete _impl_.serverid_;
  }
  _impl_.serverid_ = nullptr;
}
inline const ::QXSCMsg::ServerInfo& MsgPayload::_internal_serverid() const {
  const ::QXSCMsg::ServerInfo* p = _impl_.serverid_;
  return p != nullptr ? *p : reinterpret_cast<const ::QXSCMsg::ServerInfo&>(
      ::QXSCMsg::_ServerInfo_default_instance_);
}
inline const ::QXSCMsg::ServerInfo& MsgPayload::serverid() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.ServerId)
  return _internal_serverid();
}
inline void MsgPayload::unsafe_arena_set_allocated_serverid(
    ::QXSCMsg::ServerInfo* serverid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.serverid_);
  }
  _impl_.serverid_ = serverid;
  if (serverid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QXSCMsg.MsgPayload.ServerId)
}
inline ::QXSCMsg::ServerInfo* MsgPayload::release_serverid() {
  
  ::QXSCMsg::ServerInfo* temp = _impl_.serverid_;
  _impl_.serverid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QXSCMsg::ServerInfo* MsgPayload::unsafe_arena_release_serverid() {
  // @@protoc_insertion_point(field_release:QXSCMsg.MsgPayload.ServerId)
  
  ::QXSCMsg::ServerInfo* temp = _impl_.serverid_;
  _impl_.serverid_ = nullptr;
  return temp;
}
inline ::QXSCMsg::ServerInfo* MsgPayload::_internal_mutable_serverid() {
  
  if (_impl_.serverid_ == nullptr) {
    auto* p = CreateMaybeMessage<::QXSCMsg::ServerInfo>(GetArenaForAllocation());
    _impl_.serverid_ = p;
  }
  return _impl_.serverid_;
}
inline ::QXSCMsg::ServerInfo* MsgPayload::mutable_serverid() {
  ::QXSCMsg::ServerInfo* _msg = _internal_mutable_serverid();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.MsgPayload.ServerId)
  return _msg;
}
inline void MsgPayload::set_allocated_serverid(::QXSCMsg::ServerInfo* serverid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.serverid_;
  }
  if (serverid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(serverid);
    if (message_arena != submessage_arena) {
      serverid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.serverid_ = serverid;
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.MsgPayload.ServerId)
}

// .QXSCMsg.MsgBase msgBase = 7;
inline bool MsgPayload::_internal_has_msgbase() const {
  return this != internal_default_instance() && _impl_.msgbase_ != nullptr;
}
inline bool MsgPayload::has_msgbase() const {
  return _internal_has_msgbase();
}
inline void MsgPayload::clear_msgbase() {
  if (GetArenaForAllocation() == nullptr && _impl_.msgbase_ != nullptr) {
    delete _impl_.msgbase_;
  }
  _impl_.msgbase_ = nullptr;
}
inline const ::QXSCMsg::MsgBase& MsgPayload::_internal_msgbase() const {
  const ::QXSCMsg::MsgBase* p = _impl_.msgbase_;
  return p != nullptr ? *p : reinterpret_cast<const ::QXSCMsg::MsgBase&>(
      ::QXSCMsg::_MsgBase_default_instance_);
}
inline const ::QXSCMsg::MsgBase& MsgPayload::msgbase() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgPayload.msgBase)
  return _internal_msgbase();
}
inline void MsgPayload::unsafe_arena_set_allocated_msgbase(
    ::QXSCMsg::MsgBase* msgbase) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msgbase_);
  }
  _impl_.msgbase_ = msgbase;
  if (msgbase) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QXSCMsg.MsgPayload.msgBase)
}
inline ::QXSCMsg::MsgBase* MsgPayload::release_msgbase() {
  
  ::QXSCMsg::MsgBase* temp = _impl_.msgbase_;
  _impl_.msgbase_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QXSCMsg::MsgBase* MsgPayload::unsafe_arena_release_msgbase() {
  // @@protoc_insertion_point(field_release:QXSCMsg.MsgPayload.msgBase)
  
  ::QXSCMsg::MsgBase* temp = _impl_.msgbase_;
  _impl_.msgbase_ = nullptr;
  return temp;
}
inline ::QXSCMsg::MsgBase* MsgPayload::_internal_mutable_msgbase() {
  
  if (_impl_.msgbase_ == nullptr) {
    auto* p = CreateMaybeMessage<::QXSCMsg::MsgBase>(GetArenaForAllocation());
    _impl_.msgbase_ = p;
  }
  return _impl_.msgbase_;
}
inline ::QXSCMsg::MsgBase* MsgPayload::mutable_msgbase() {
  ::QXSCMsg::MsgBase* _msg = _internal_mutable_msgbase();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.MsgPayload.msgBase)
  return _msg;
}
inline void MsgPayload::set_allocated_msgbase(::QXSCMsg::MsgBase* msgbase) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msgbase_;
  }
  if (msgbase) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msgbase);
    if (message_arena != submessage_arena) {
      msgbase = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msgbase, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.msgbase_ = msgbase;
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.MsgPayload.msgBase)
}

// -------------------------------------------------------------------

// ClientInfo

// uint32 clientId = 1;
inline void ClientInfo::clear_clientid() {
  _impl_.clientid_ = 0u;
}
inline uint32_t ClientInfo::_internal_clientid() const {
  return _impl_.clientid_;
}
inline uint32_t ClientInfo::clientid() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.ClientInfo.clientId)
  return _internal_clientid();
}
inline void ClientInfo::_internal_set_clientid(uint32_t value) {
  
  _impl_.clientid_ = value;
}
inline void ClientInfo::set_clientid(uint32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.ClientInfo.clientId)
}

// -------------------------------------------------------------------

// ServerInfo

// uint32 serverId = 1;
inline void ServerInfo::clear_serverid() {
  _impl_.serverid_ = 0u;
}
inline uint32_t ServerInfo::_internal_serverid() const {
  return _impl_.serverid_;
}
inline uint32_t ServerInfo::serverid() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.ServerInfo.serverId)
  return _internal_serverid();
}
inline void ServerInfo::_internal_set_serverid(uint32_t value) {
  
  _impl_.serverid_ = value;
}
inline void ServerInfo::set_serverid(uint32_t value) {
  _internal_set_serverid(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.ServerInfo.serverId)
}

// string serverName = 2;
inline void ServerInfo::clear_servername() {
  _impl_.servername_.ClearToEmpty();
}
inline const std::string& ServerInfo::servername() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.ServerInfo.serverName)
  return _internal_servername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_servername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.servername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:QXSCMsg.ServerInfo.serverName)
}
inline std::string* ServerInfo::mutable_servername() {
  std::string* _s = _internal_mutable_servername();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.ServerInfo.serverName)
  return _s;
}
inline const std::string& ServerInfo::_internal_servername() const {
  return _impl_.servername_.Get();
}
inline void ServerInfo::_internal_set_servername(const std::string& value) {
  
  _impl_.servername_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_servername() {
  
  return _impl_.servername_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerInfo::release_servername() {
  // @@protoc_insertion_point(field_release:QXSCMsg.ServerInfo.serverName)
  return _impl_.servername_.Release();
}
inline void ServerInfo::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  _impl_.servername_.SetAllocated(servername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.servername_.IsDefault()) {
    _impl_.servername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.ServerInfo.serverName)
}

// -------------------------------------------------------------------

// MsgBase

// .QXSCMsg.ClientRegister clientRegister = 1;
inline bool MsgBase::_internal_has_clientregister() const {
  return this != internal_default_instance() && _impl_.clientregister_ != nullptr;
}
inline bool MsgBase::has_clientregister() const {
  return _internal_has_clientregister();
}
inline void MsgBase::clear_clientregister() {
  if (GetArenaForAllocation() == nullptr && _impl_.clientregister_ != nullptr) {
    delete _impl_.clientregister_;
  }
  _impl_.clientregister_ = nullptr;
}
inline const ::QXSCMsg::ClientRegister& MsgBase::_internal_clientregister() const {
  const ::QXSCMsg::ClientRegister* p = _impl_.clientregister_;
  return p != nullptr ? *p : reinterpret_cast<const ::QXSCMsg::ClientRegister&>(
      ::QXSCMsg::_ClientRegister_default_instance_);
}
inline const ::QXSCMsg::ClientRegister& MsgBase::clientregister() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgBase.clientRegister)
  return _internal_clientregister();
}
inline void MsgBase::unsafe_arena_set_allocated_clientregister(
    ::QXSCMsg::ClientRegister* clientregister) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientregister_);
  }
  _impl_.clientregister_ = clientregister;
  if (clientregister) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QXSCMsg.MsgBase.clientRegister)
}
inline ::QXSCMsg::ClientRegister* MsgBase::release_clientregister() {
  
  ::QXSCMsg::ClientRegister* temp = _impl_.clientregister_;
  _impl_.clientregister_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QXSCMsg::ClientRegister* MsgBase::unsafe_arena_release_clientregister() {
  // @@protoc_insertion_point(field_release:QXSCMsg.MsgBase.clientRegister)
  
  ::QXSCMsg::ClientRegister* temp = _impl_.clientregister_;
  _impl_.clientregister_ = nullptr;
  return temp;
}
inline ::QXSCMsg::ClientRegister* MsgBase::_internal_mutable_clientregister() {
  
  if (_impl_.clientregister_ == nullptr) {
    auto* p = CreateMaybeMessage<::QXSCMsg::ClientRegister>(GetArenaForAllocation());
    _impl_.clientregister_ = p;
  }
  return _impl_.clientregister_;
}
inline ::QXSCMsg::ClientRegister* MsgBase::mutable_clientregister() {
  ::QXSCMsg::ClientRegister* _msg = _internal_mutable_clientregister();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.MsgBase.clientRegister)
  return _msg;
}
inline void MsgBase::set_allocated_clientregister(::QXSCMsg::ClientRegister* clientregister) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.clientregister_;
  }
  if (clientregister) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clientregister);
    if (message_arena != submessage_arena) {
      clientregister = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientregister, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clientregister_ = clientregister;
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.MsgBase.clientRegister)
}

// .QXSCMsg.ClientRegisterReply clientRegisterReply = 2;
inline bool MsgBase::_internal_has_clientregisterreply() const {
  return this != internal_default_instance() && _impl_.clientregisterreply_ != nullptr;
}
inline bool MsgBase::has_clientregisterreply() const {
  return _internal_has_clientregisterreply();
}
inline void MsgBase::clear_clientregisterreply() {
  if (GetArenaForAllocation() == nullptr && _impl_.clientregisterreply_ != nullptr) {
    delete _impl_.clientregisterreply_;
  }
  _impl_.clientregisterreply_ = nullptr;
}
inline const ::QXSCMsg::ClientRegisterReply& MsgBase::_internal_clientregisterreply() const {
  const ::QXSCMsg::ClientRegisterReply* p = _impl_.clientregisterreply_;
  return p != nullptr ? *p : reinterpret_cast<const ::QXSCMsg::ClientRegisterReply&>(
      ::QXSCMsg::_ClientRegisterReply_default_instance_);
}
inline const ::QXSCMsg::ClientRegisterReply& MsgBase::clientregisterreply() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.MsgBase.clientRegisterReply)
  return _internal_clientregisterreply();
}
inline void MsgBase::unsafe_arena_set_allocated_clientregisterreply(
    ::QXSCMsg::ClientRegisterReply* clientregisterreply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.clientregisterreply_);
  }
  _impl_.clientregisterreply_ = clientregisterreply;
  if (clientregisterreply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:QXSCMsg.MsgBase.clientRegisterReply)
}
inline ::QXSCMsg::ClientRegisterReply* MsgBase::release_clientregisterreply() {
  
  ::QXSCMsg::ClientRegisterReply* temp = _impl_.clientregisterreply_;
  _impl_.clientregisterreply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::QXSCMsg::ClientRegisterReply* MsgBase::unsafe_arena_release_clientregisterreply() {
  // @@protoc_insertion_point(field_release:QXSCMsg.MsgBase.clientRegisterReply)
  
  ::QXSCMsg::ClientRegisterReply* temp = _impl_.clientregisterreply_;
  _impl_.clientregisterreply_ = nullptr;
  return temp;
}
inline ::QXSCMsg::ClientRegisterReply* MsgBase::_internal_mutable_clientregisterreply() {
  
  if (_impl_.clientregisterreply_ == nullptr) {
    auto* p = CreateMaybeMessage<::QXSCMsg::ClientRegisterReply>(GetArenaForAllocation());
    _impl_.clientregisterreply_ = p;
  }
  return _impl_.clientregisterreply_;
}
inline ::QXSCMsg::ClientRegisterReply* MsgBase::mutable_clientregisterreply() {
  ::QXSCMsg::ClientRegisterReply* _msg = _internal_mutable_clientregisterreply();
  // @@protoc_insertion_point(field_mutable:QXSCMsg.MsgBase.clientRegisterReply)
  return _msg;
}
inline void MsgBase::set_allocated_clientregisterreply(::QXSCMsg::ClientRegisterReply* clientregisterreply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.clientregisterreply_;
  }
  if (clientregisterreply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(clientregisterreply);
    if (message_arena != submessage_arena) {
      clientregisterreply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clientregisterreply, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.clientregisterreply_ = clientregisterreply;
  // @@protoc_insertion_point(field_set_allocated:QXSCMsg.MsgBase.clientRegisterReply)
}

// -------------------------------------------------------------------

// ClientRegister

// uint32 clientId = 1;
inline void ClientRegister::clear_clientid() {
  _impl_.clientid_ = 0u;
}
inline uint32_t ClientRegister::_internal_clientid() const {
  return _impl_.clientid_;
}
inline uint32_t ClientRegister::clientid() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.ClientRegister.clientId)
  return _internal_clientid();
}
inline void ClientRegister::_internal_set_clientid(uint32_t value) {
  
  _impl_.clientid_ = value;
}
inline void ClientRegister::set_clientid(uint32_t value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.ClientRegister.clientId)
}

// -------------------------------------------------------------------

// ClientRegisterReply

// int32 errCode = 1;
inline void ClientRegisterReply::clear_errcode() {
  _impl_.errcode_ = 0;
}
inline int32_t ClientRegisterReply::_internal_errcode() const {
  return _impl_.errcode_;
}
inline int32_t ClientRegisterReply::errcode() const {
  // @@protoc_insertion_point(field_get:QXSCMsg.ClientRegisterReply.errCode)
  return _internal_errcode();
}
inline void ClientRegisterReply::_internal_set_errcode(int32_t value) {
  
  _impl_.errcode_ = value;
}
inline void ClientRegisterReply::set_errcode(int32_t value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:QXSCMsg.ClientRegisterReply.errCode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace QXSCMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::QXSCMsg::MsgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QXSCMsg::MsgType>() {
  return ::QXSCMsg::MsgType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_QXSCMsg_2eproto
