// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QXMSMsg.proto

#include "QXMSMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace QXMSMsg {
PROTOBUF_CONSTEXPR MsgPayload::MsgPayload(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bussinesskey_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverinfo_)*/nullptr
  , /*decltype(_impl_.msgbase_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.transid_)*/0u
  , /*decltype(_impl_.errcode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgPayloadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPayloadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPayloadDefaultTypeInternal() {}
  union {
    MsgPayload _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPayloadDefaultTypeInternal _MsgPayload_default_instance_;
PROTOBUF_CONSTEXPR ServerInfo::ServerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.servername_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serverid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerInfoDefaultTypeInternal() {}
  union {
    ServerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
PROTOBUF_CONSTEXPR MsgBase::MsgBase(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.svrhealthreport_)*/nullptr
  , /*decltype(_impl_.msgtype_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgBaseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgBaseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgBaseDefaultTypeInternal() {}
  union {
    MsgBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
PROTOBUF_CONSTEXPR ClientInfo::ClientInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientInfoDefaultTypeInternal() {}
  union {
    ClientInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
PROTOBUF_CONSTEXPR SvrHealthReport::SvrHealthReport(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.clientinfo_)*/{}
  , /*decltype(_impl_.cpuusage_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SvrHealthReportDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SvrHealthReportDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SvrHealthReportDefaultTypeInternal() {}
  union {
    SvrHealthReport _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SvrHealthReportDefaultTypeInternal _SvrHealthReport_default_instance_;
}  // namespace QXMSMsg
static ::_pb::Metadata file_level_metadata_QXMSMsg_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_QXMSMsg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_QXMSMsg_2eproto = nullptr;

const uint32_t TableStruct_QXMSMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _impl_.transid_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _impl_.bussinesskey_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _impl_.serverinfo_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _impl_.errcode_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgPayload, _impl_.msgbase_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::ServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::ServerInfo, _impl_.serverid_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::ServerInfo, _impl_.servername_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgBase, _impl_.msgtype_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::MsgBase, _impl_.svrhealthreport_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::ClientInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::ClientInfo, _impl_.clientid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::SvrHealthReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::SvrHealthReport, _impl_.cpuusage_),
  PROTOBUF_FIELD_OFFSET(::QXMSMsg::SvrHealthReport, _impl_.clientinfo_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::QXMSMsg::MsgPayload)},
  { 12, -1, -1, sizeof(::QXMSMsg::ServerInfo)},
  { 20, -1, -1, sizeof(::QXMSMsg::MsgBase)},
  { 28, -1, -1, sizeof(::QXMSMsg::ClientInfo)},
  { 35, -1, -1, sizeof(::QXMSMsg::SvrHealthReport)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::QXMSMsg::_MsgPayload_default_instance_._instance,
  &::QXMSMsg::_ServerInfo_default_instance_._instance,
  &::QXMSMsg::_MsgBase_default_instance_._instance,
  &::QXMSMsg::_ClientInfo_default_instance_._instance,
  &::QXMSMsg::_SvrHealthReport_default_instance_._instance,
};

const char descriptor_table_protodef_QXMSMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rQXMSMsg.proto\022\007QXMSMsg\"\243\001\n\nMsgPayload\022"
  "\017\n\007transId\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\022\024\n\014b"
  "ussinessKey\030\003 \001(\t\022\'\n\nserverInfo\030\005 \001(\0132\023."
  "QXMSMsg.ServerInfo\022\017\n\007errCode\030\006 \001(\005\022!\n\007m"
  "sgBase\030\007 \001(\0132\020.QXMSMsg.MsgBase\"2\n\nServer"
  "Info\022\020\n\010serverId\030\001 \001(\r\022\022\n\nserverName\030\002 \001"
  "(\t\"M\n\007MsgBase\022\017\n\007msgType\030\001 \001(\r\0221\n\017svrHea"
  "lthReport\030\002 \001(\0132\030.QXMSMsg.SvrHealthRepor"
  "t\"\036\n\nClientInfo\022\020\n\010clientId\030\001 \001(\r\"L\n\017Svr"
  "HealthReport\022\020\n\010cpuUsage\030\001 \001(\002\022\'\n\nclient"
  "Info\030\002 \003(\0132\023.QXMSMsg.ClientInfo*\220\001\n\007MsgT"
  "ype\022\031\n\025QX_MS_MSG_TYPE_UKNOWN\020\000\022$\n QX_MS_"
  "MSG_TYPE_SVR_HEALTH_REPORT\020\001\022\036\n\032QX_MS_MS"
  "G_TYPE_STOP_WORKER\020\003\022$\n QX_MS_MSG_TYPE_S"
  "TOP_WORKER_REPLY\020\004B\014\n\nQXCommMngrb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_QXMSMsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_QXMSMsg_2eproto = {
    false, false, 600, descriptor_table_protodef_QXMSMsg_2eproto,
    "QXMSMsg.proto",
    &descriptor_table_QXMSMsg_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_QXMSMsg_2eproto::offsets,
    file_level_metadata_QXMSMsg_2eproto, file_level_enum_descriptors_QXMSMsg_2eproto,
    file_level_service_descriptors_QXMSMsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_QXMSMsg_2eproto_getter() {
  return &descriptor_table_QXMSMsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_QXMSMsg_2eproto(&descriptor_table_QXMSMsg_2eproto);
namespace QXMSMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_QXMSMsg_2eproto);
  return file_level_enum_descriptors_QXMSMsg_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgPayload::_Internal {
 public:
  static const ::QXMSMsg::ServerInfo& serverinfo(const MsgPayload* msg);
  static const ::QXMSMsg::MsgBase& msgbase(const MsgPayload* msg);
};

const ::QXMSMsg::ServerInfo&
MsgPayload::_Internal::serverinfo(const MsgPayload* msg) {
  return *msg->_impl_.serverinfo_;
}
const ::QXMSMsg::MsgBase&
MsgPayload::_Internal::msgbase(const MsgPayload* msg) {
  return *msg->_impl_.msgbase_;
}
MsgPayload::MsgPayload(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QXMSMsg.MsgPayload)
}
MsgPayload::MsgPayload(const MsgPayload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPayload* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bussinesskey_){}
    , decltype(_impl_.serverinfo_){nullptr}
    , decltype(_impl_.msgbase_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.transid_){}
    , decltype(_impl_.errcode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bussinesskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bussinesskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bussinesskey().empty()) {
    _this->_impl_.bussinesskey_.Set(from._internal_bussinesskey(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_serverinfo()) {
    _this->_impl_.serverinfo_ = new ::QXMSMsg::ServerInfo(*from._impl_.serverinfo_);
  }
  if (from._internal_has_msgbase()) {
    _this->_impl_.msgbase_ = new ::QXMSMsg::MsgBase(*from._impl_.msgbase_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.errcode_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.errcode_));
  // @@protoc_insertion_point(copy_constructor:QXMSMsg.MsgPayload)
}

inline void MsgPayload::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bussinesskey_){}
    , decltype(_impl_.serverinfo_){nullptr}
    , decltype(_impl_.msgbase_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.transid_){0u}
    , decltype(_impl_.errcode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bussinesskey_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bussinesskey_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgPayload::~MsgPayload() {
  // @@protoc_insertion_point(destructor:QXMSMsg.MsgPayload)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPayload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bussinesskey_.Destroy();
  if (this != internal_default_instance()) delete _impl_.serverinfo_;
  if (this != internal_default_instance()) delete _impl_.msgbase_;
}

void MsgPayload::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:QXMSMsg.MsgPayload)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bussinesskey_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.serverinfo_ != nullptr) {
    delete _impl_.serverinfo_;
  }
  _impl_.serverinfo_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.msgbase_ != nullptr) {
    delete _impl_.msgbase_;
  }
  _impl_.msgbase_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.errcode_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.errcode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPayload::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 transId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.transid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string bussinessKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bussinesskey();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QXMSMsg.MsgPayload.bussinessKey"));
        } else
          goto handle_unusual;
        continue;
      // .QXMSMsg.ServerInfo serverInfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 errCode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .QXMSMsg.MsgBase msgBase = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgbase(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgPayload::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QXMSMsg.MsgPayload)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 transId = 1;
  if (this->_internal_transid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_transid(), target);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string bussinessKey = 3;
  if (!this->_internal_bussinesskey().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bussinesskey().data(), static_cast<int>(this->_internal_bussinesskey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QXMSMsg.MsgPayload.bussinessKey");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bussinesskey(), target);
  }

  // .QXMSMsg.ServerInfo serverInfo = 5;
  if (this->_internal_has_serverinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::serverinfo(this),
        _Internal::serverinfo(this).GetCachedSize(), target, stream);
  }

  // int32 errCode = 6;
  if (this->_internal_errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_errcode(), target);
  }

  // .QXMSMsg.MsgBase msgBase = 7;
  if (this->_internal_has_msgbase()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::msgbase(this),
        _Internal::msgbase(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QXMSMsg.MsgPayload)
  return target;
}

size_t MsgPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QXMSMsg.MsgPayload)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bussinessKey = 3;
  if (!this->_internal_bussinesskey().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bussinesskey());
  }

  // .QXMSMsg.ServerInfo serverInfo = 5;
  if (this->_internal_has_serverinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.serverinfo_);
  }

  // .QXMSMsg.MsgBase msgBase = 7;
  if (this->_internal_has_msgbase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msgbase_);
  }

  // uint64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // uint32 transId = 1;
  if (this->_internal_transid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_transid());
  }

  // int32 errCode = 6;
  if (this->_internal_errcode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_errcode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPayload::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPayload::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPayload::GetClassData() const { return &_class_data_; }


void MsgPayload::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPayload*>(&to_msg);
  auto& from = static_cast<const MsgPayload&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QXMSMsg.MsgPayload)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bussinesskey().empty()) {
    _this->_internal_set_bussinesskey(from._internal_bussinesskey());
  }
  if (from._internal_has_serverinfo()) {
    _this->_internal_mutable_serverinfo()->::QXMSMsg::ServerInfo::MergeFrom(
        from._internal_serverinfo());
  }
  if (from._internal_has_msgbase()) {
    _this->_internal_mutable_msgbase()->::QXMSMsg::MsgBase::MergeFrom(
        from._internal_msgbase());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_transid() != 0) {
    _this->_internal_set_transid(from._internal_transid());
  }
  if (from._internal_errcode() != 0) {
    _this->_internal_set_errcode(from._internal_errcode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPayload::CopyFrom(const MsgPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QXMSMsg.MsgPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPayload::IsInitialized() const {
  return true;
}

void MsgPayload::InternalSwap(MsgPayload* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bussinesskey_, lhs_arena,
      &other->_impl_.bussinesskey_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPayload, _impl_.errcode_)
      + sizeof(MsgPayload::_impl_.errcode_)
      - PROTOBUF_FIELD_OFFSET(MsgPayload, _impl_.serverinfo_)>(
          reinterpret_cast<char*>(&_impl_.serverinfo_),
          reinterpret_cast<char*>(&other->_impl_.serverinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPayload::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QXMSMsg_2eproto_getter, &descriptor_table_QXMSMsg_2eproto_once,
      file_level_metadata_QXMSMsg_2eproto[0]);
}

// ===================================================================

class ServerInfo::_Internal {
 public:
};

ServerInfo::ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QXMSMsg.ServerInfo)
}
ServerInfo::ServerInfo(const ServerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_servername().empty()) {
    _this->_impl_.servername_.Set(from._internal_servername(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.serverid_ = from._impl_.serverid_;
  // @@protoc_insertion_point(copy_constructor:QXMSMsg.ServerInfo)
}

inline void ServerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.servername_){}
    , decltype(_impl_.serverid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.servername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.servername_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerInfo::~ServerInfo() {
  // @@protoc_insertion_point(destructor:QXMSMsg.ServerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.servername_.Destroy();
}

void ServerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:QXMSMsg.ServerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.servername_.ClearToEmpty();
  _impl_.serverid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 serverId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.serverid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serverName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_servername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "QXMSMsg.ServerInfo.serverName"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QXMSMsg.ServerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverid(), target);
  }

  // string serverName = 2;
  if (!this->_internal_servername().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_servername().data(), static_cast<int>(this->_internal_servername().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "QXMSMsg.ServerInfo.serverName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_servername(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QXMSMsg.ServerInfo)
  return target;
}

size_t ServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QXMSMsg.ServerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string serverName = 2;
  if (!this->_internal_servername().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_servername());
  }

  // uint32 serverId = 1;
  if (this->_internal_serverid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_serverid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerInfo::GetClassData() const { return &_class_data_; }


void ServerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerInfo*>(&to_msg);
  auto& from = static_cast<const ServerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QXMSMsg.ServerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_servername().empty()) {
    _this->_internal_set_servername(from._internal_servername());
  }
  if (from._internal_serverid() != 0) {
    _this->_internal_set_serverid(from._internal_serverid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerInfo::CopyFrom(const ServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QXMSMsg.ServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInfo::IsInitialized() const {
  return true;
}

void ServerInfo::InternalSwap(ServerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.servername_, lhs_arena,
      &other->_impl_.servername_, rhs_arena
  );
  swap(_impl_.serverid_, other->_impl_.serverid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QXMSMsg_2eproto_getter, &descriptor_table_QXMSMsg_2eproto_once,
      file_level_metadata_QXMSMsg_2eproto[1]);
}

// ===================================================================

class MsgBase::_Internal {
 public:
  static const ::QXMSMsg::SvrHealthReport& svrhealthreport(const MsgBase* msg);
};

const ::QXMSMsg::SvrHealthReport&
MsgBase::_Internal::svrhealthreport(const MsgBase* msg) {
  return *msg->_impl_.svrhealthreport_;
}
MsgBase::MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QXMSMsg.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgBase* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.svrhealthreport_){nullptr}
    , decltype(_impl_.msgtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_svrhealthreport()) {
    _this->_impl_.svrhealthreport_ = new ::QXMSMsg::SvrHealthReport(*from._impl_.svrhealthreport_);
  }
  _this->_impl_.msgtype_ = from._impl_.msgtype_;
  // @@protoc_insertion_point(copy_constructor:QXMSMsg.MsgBase)
}

inline void MsgBase::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.svrhealthreport_){nullptr}
    , decltype(_impl_.msgtype_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:QXMSMsg.MsgBase)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.svrhealthreport_;
}

void MsgBase::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:QXMSMsg.MsgBase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.svrhealthreport_ != nullptr) {
    delete _impl_.svrhealthreport_;
  }
  _impl_.svrhealthreport_ = nullptr;
  _impl_.msgtype_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBase::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 msgType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .QXMSMsg.SvrHealthReport svrHealthReport = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_svrhealthreport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgBase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QXMSMsg.MsgBase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msgType = 1;
  if (this->_internal_msgtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgtype(), target);
  }

  // .QXMSMsg.SvrHealthReport svrHealthReport = 2;
  if (this->_internal_has_svrhealthreport()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::svrhealthreport(this),
        _Internal::svrhealthreport(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QXMSMsg.MsgBase)
  return target;
}

size_t MsgBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QXMSMsg.MsgBase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .QXMSMsg.SvrHealthReport svrHealthReport = 2;
  if (this->_internal_has_svrhealthreport()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.svrhealthreport_);
  }

  // uint32 msgType = 1;
  if (this->_internal_msgtype() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_msgtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgBase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgBase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgBase::GetClassData() const { return &_class_data_; }


void MsgBase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgBase*>(&to_msg);
  auto& from = static_cast<const MsgBase&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QXMSMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_svrhealthreport()) {
    _this->_internal_mutable_svrhealthreport()->::QXMSMsg::SvrHealthReport::MergeFrom(
        from._internal_svrhealthreport());
  }
  if (from._internal_msgtype() != 0) {
    _this->_internal_set_msgtype(from._internal_msgtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QXMSMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  return true;
}

void MsgBase::InternalSwap(MsgBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBase, _impl_.msgtype_)
      + sizeof(MsgBase::_impl_.msgtype_)
      - PROTOBUF_FIELD_OFFSET(MsgBase, _impl_.svrhealthreport_)>(
          reinterpret_cast<char*>(&_impl_.svrhealthreport_),
          reinterpret_cast<char*>(&other->_impl_.svrhealthreport_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBase::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QXMSMsg_2eproto_getter, &descriptor_table_QXMSMsg_2eproto_once,
      file_level_metadata_QXMSMsg_2eproto[2]);
}

// ===================================================================

class ClientInfo::_Internal {
 public:
};

ClientInfo::ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QXMSMsg.ClientInfo)
}
ClientInfo::ClientInfo(const ClientInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.clientid_ = from._impl_.clientid_;
  // @@protoc_insertion_point(copy_constructor:QXMSMsg.ClientInfo)
}

inline void ClientInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientInfo::~ClientInfo() {
  // @@protoc_insertion_point(destructor:QXMSMsg.ClientInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:QXMSMsg.ClientInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 clientId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.clientid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QXMSMsg.ClientInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 clientId = 1;
  if (this->_internal_clientid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_clientid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QXMSMsg.ClientInfo)
  return target;
}

size_t ClientInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QXMSMsg.ClientInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 clientId = 1;
  if (this->_internal_clientid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_clientid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientInfo::GetClassData() const { return &_class_data_; }


void ClientInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientInfo*>(&to_msg);
  auto& from = static_cast<const ClientInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QXMSMsg.ClientInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_clientid() != 0) {
    _this->_internal_set_clientid(from._internal_clientid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientInfo::CopyFrom(const ClientInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QXMSMsg.ClientInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientInfo::IsInitialized() const {
  return true;
}

void ClientInfo::InternalSwap(ClientInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.clientid_, other->_impl_.clientid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QXMSMsg_2eproto_getter, &descriptor_table_QXMSMsg_2eproto_once,
      file_level_metadata_QXMSMsg_2eproto[3]);
}

// ===================================================================

class SvrHealthReport::_Internal {
 public:
};

SvrHealthReport::SvrHealthReport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:QXMSMsg.SvrHealthReport)
}
SvrHealthReport::SvrHealthReport(const SvrHealthReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SvrHealthReport* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfo_){from._impl_.clientinfo_}
    , decltype(_impl_.cpuusage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cpuusage_ = from._impl_.cpuusage_;
  // @@protoc_insertion_point(copy_constructor:QXMSMsg.SvrHealthReport)
}

inline void SvrHealthReport::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.clientinfo_){arena}
    , decltype(_impl_.cpuusage_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SvrHealthReport::~SvrHealthReport() {
  // @@protoc_insertion_point(destructor:QXMSMsg.SvrHealthReport)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SvrHealthReport::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientinfo_.~RepeatedPtrField();
}

void SvrHealthReport::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SvrHealthReport::Clear() {
// @@protoc_insertion_point(message_clear_start:QXMSMsg.SvrHealthReport)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.clientinfo_.Clear();
  _impl_.cpuusage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SvrHealthReport::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float cpuUsage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.cpuusage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated .QXMSMsg.ClientInfo clientInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_clientinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SvrHealthReport::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:QXMSMsg.SvrHealthReport)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float cpuUsage = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpuusage = this->_internal_cpuusage();
  uint32_t raw_cpuusage;
  memcpy(&raw_cpuusage, &tmp_cpuusage, sizeof(tmp_cpuusage));
  if (raw_cpuusage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_cpuusage(), target);
  }

  // repeated .QXMSMsg.ClientInfo clientInfo = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_clientinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_clientinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:QXMSMsg.SvrHealthReport)
  return target;
}

size_t SvrHealthReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:QXMSMsg.SvrHealthReport)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .QXMSMsg.ClientInfo clientInfo = 2;
  total_size += 1UL * this->_internal_clientinfo_size();
  for (const auto& msg : this->_impl_.clientinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float cpuUsage = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpuusage = this->_internal_cpuusage();
  uint32_t raw_cpuusage;
  memcpy(&raw_cpuusage, &tmp_cpuusage, sizeof(tmp_cpuusage));
  if (raw_cpuusage != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SvrHealthReport::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SvrHealthReport::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SvrHealthReport::GetClassData() const { return &_class_data_; }


void SvrHealthReport::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SvrHealthReport*>(&to_msg);
  auto& from = static_cast<const SvrHealthReport&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:QXMSMsg.SvrHealthReport)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.clientinfo_.MergeFrom(from._impl_.clientinfo_);
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cpuusage = from._internal_cpuusage();
  uint32_t raw_cpuusage;
  memcpy(&raw_cpuusage, &tmp_cpuusage, sizeof(tmp_cpuusage));
  if (raw_cpuusage != 0) {
    _this->_internal_set_cpuusage(from._internal_cpuusage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SvrHealthReport::CopyFrom(const SvrHealthReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:QXMSMsg.SvrHealthReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SvrHealthReport::IsInitialized() const {
  return true;
}

void SvrHealthReport::InternalSwap(SvrHealthReport* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.clientinfo_.InternalSwap(&other->_impl_.clientinfo_);
  swap(_impl_.cpuusage_, other->_impl_.cpuusage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SvrHealthReport::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_QXMSMsg_2eproto_getter, &descriptor_table_QXMSMsg_2eproto_once,
      file_level_metadata_QXMSMsg_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace QXMSMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::QXMSMsg::MsgPayload*
Arena::CreateMaybeMessage< ::QXMSMsg::MsgPayload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QXMSMsg::MsgPayload >(arena);
}
template<> PROTOBUF_NOINLINE ::QXMSMsg::ServerInfo*
Arena::CreateMaybeMessage< ::QXMSMsg::ServerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QXMSMsg::ServerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::QXMSMsg::MsgBase*
Arena::CreateMaybeMessage< ::QXMSMsg::MsgBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QXMSMsg::MsgBase >(arena);
}
template<> PROTOBUF_NOINLINE ::QXMSMsg::ClientInfo*
Arena::CreateMaybeMessage< ::QXMSMsg::ClientInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QXMSMsg::ClientInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::QXMSMsg::SvrHealthReport*
Arena::CreateMaybeMessage< ::QXMSMsg::SvrHealthReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::QXMSMsg::SvrHealthReport >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
